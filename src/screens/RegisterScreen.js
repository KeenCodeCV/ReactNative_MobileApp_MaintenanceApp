import React, { useState, useContext, useMemo } from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import InputField from '../components/InputField';
import Screen from '../components/Screen';
import { AuthContext } from '../context/AuthContext';
import CustomAlert from '../components/CustomAlert';

export default function RegisterScreen({ navigation }) {
  const { register, login } = useContext(AuthContext);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const canSubmit = useMemo(
    () => username.trim().length > 0 && password.length > 0,
    [username, password]
  );

  const [alert, setAlert] = useState({
    visible: false,
    title: '',
    message: '',
    type: 'info',
    showCancel: false,
    onConfirm: null,
  });

  const onSubmit = async () => {
    if (!canSubmit) {
      return setAlert({
        visible: true,
        title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö',
        message: '‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö',
        type: 'warning',
        showCancel: false,
        onConfirm: null,
      });
    }

    const res = await register(username.trim(), password);
    if (!res.ok && res.code === 'USER_EXISTS') {
      return setAlert({
        visible: true,
        title: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        message: '‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß',
        type: 'error',
        showCancel: false,
        onConfirm: null,
      });
    }
    if (res.ok) {
      // ‡πÇ‡∏ä‡∏ß‡πå popup ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î "‡∏ï‡∏Å‡∏•‡∏á"
      setAlert({
        visible: true,
        title: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ',
        message: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏î "‡∏ï‡∏Å‡∏•‡∏á" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
        type: 'success',
        showCancel: false, // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        onConfirm: async () => {
          setAlert(a => ({ ...a, visible: false, onConfirm: null }));
          await login(username.trim(), password); // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        },
      });
    }
  };

  return (
    <Screen contentStyle={{ justifyContent: 'center' }}>
      <View style={styles.card}>
        <Text style={styles.title}>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</Text>

        <InputField label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" value={username} onChangeText={setUsername} placeholder="username" required />
        <InputField label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" value={password} onChangeText={setPassword} placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" secureTextEntry required />

        <TouchableOpacity
          style={[styles.btn, { backgroundColor: canSubmit ? '#10B981' : '#A7F3D0' }]}
          onPress={onSubmit}
          disabled={!canSubmit}
        >
          <Ionicons name="person-add" size={18} color="#fff" style={{ marginRight: 6 }} />
          <Text style={styles.btnText}>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.ghost} onPress={() => navigation.replace('Login')}>
          <Ionicons name="arrow-back" size={16} color="#2563EB" />
          <Text style={styles.ghostText}>‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô</Text>
        </TouchableOpacity>
      </View>

      <CustomAlert
        visible={alert.visible}
        title={alert.title}
        message={alert.message}
        type={alert.type}
        showCancel={alert.showCancel}
        onConfirm={alert.onConfirm}
        onClose={() => setAlert(a => ({ ...a, visible: false, onConfirm: null }))}
      />
    </Screen>
  );
}

const styles = StyleSheet.create({
  card: { backgroundColor: '#F9FAFB', borderRadius: 18, padding: 22, elevation: 3 },
  title: { fontSize: 22, fontWeight: '800', color: '#111827', textAlign: 'center', marginBottom: 12 },
  btn: { flexDirection: 'row', alignItems: 'center', justifyContent: 'center', paddingVertical: 12, borderRadius: 12, marginTop: 8 },
  btnText: { color: '#fff', fontWeight: '700' },
  ghost: { flexDirection: 'row', justifyContent: 'center', alignItems: 'center', marginTop: 12, gap: 6 },
  ghostText: { color: '#2563EB', fontWeight: '600' },
});
